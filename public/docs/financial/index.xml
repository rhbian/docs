<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>skasis</title>
    <link>https://example.com/docs/financial/</link>
    <description>Recent content on skasis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <atom:link href="https://example.com/docs/financial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Alpha Factor</title>
      <link>https://example.com/docs/financial/alpha_factor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/financial/alpha_factor/</guid>
      <description> 金融特征工程 - 如何研究 Alpha 因子 # alpha因子的研究和执行的工作流&#xA;Research&#xA;Get Predictive Data Define Investment Universe Design Alpha Factors Combine Alpha Factors Execution&#xA;Optimize Portfolio Execute Trades </description>
    </item>
    <item>
      <title>Fundamental Data</title>
      <link>https://example.com/docs/financial/fundamental_data/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/financial/fundamental_data/</guid>
      <description>基础知识 # 不同类型的订单 # 市价订单(market order):市价订单旨在在抵达交易场所时立即执行，以那一刻的市价为准。 限价订单(limit order):限价订单只有在市场价格高于卖出限价订单的限价或低于买入限价订单的限价时才执行。 止损订单(stop order):止损订单则只有在市场价格升至买入止损订单的指定价格或下降至卖出止损订单的指定价格时才激活。 买入止损订单(buy stop order):用于限制空头交易的损失。 数据清洗与整理 # 略。详见jupyter文档&#xA;订单的可视化 # tick bars # tick级别的数据体量较大，刻画数据可以使用最直接的直线图。刻画在不同的时间戳下的成交价格。由于在开盘和收盘时交易活动最活跃，波动也最大，所以经常去掉cross数据。&#xA;书中核心代码如下&#xA;stock, date = &amp;#39;AAPL&amp;#39;, &amp;#39;20191030&amp;#39; title = &amp;#39;{} | {}&amp;#39;.format(stock, pd.to_datetime(date).date() with pd.HDFStore(itch_store) as store: sys_events = store[&amp;#39;S&amp;#39;].set_index(&amp;#39;event_code&amp;#39;) # system events sys_events.timestamp = sys_events.timestamp.add(pd.to_datetime(date)).dt.time market_open = sys_events.loc[&amp;#39;Q&amp;#39;, &amp;#39;timestamp&amp;#39;] market_close = sys_events.loc[&amp;#39;M&amp;#39;, &amp;#39;timestamp&amp;#39;] with pd.HDFStore(stock_store) as store: trades = store[&amp;#39;{}/trades&amp;#39;.format(stock)].reset_index() trades = trades[trades.cross == 0] # excluding data from open/close crossings trades.</description>
    </item>
    <item>
      <title>金融常见术语</title>
      <link>https://example.com/docs/financial/terminology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>https://example.com/docs/financial/terminology/</guid>
      <description> 概念 # 策略 # </description>
    </item>
  </channel>
</rss>
