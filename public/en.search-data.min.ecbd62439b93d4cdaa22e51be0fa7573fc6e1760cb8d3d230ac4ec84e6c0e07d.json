[{"id":0,"href":"/docs/first_doc/","title":"firstpost","section":"Docs","content":"this is the firt post\n"},{"id":1,"href":"/docs/linux/acme/","title":"acme","section":"Linux","content":" 更新证书 # 使用root权限。\n# acme.sh --renew -d dev.skasis.com --key-file /etc/trojan/private.key --fullchain-file /etc/trojan/fullchain.cer # rc-service nginx reload "},{"id":2,"href":"/docs/financial/alpha_factor/","title":"Alpha Factor","section":"Financial","content":" 金融特征工程 - 如何研究 Alpha 因子 # alpha因子的研究和执行的工作流\nResearch\nGet Predictive Data Define Investment Universe Design Alpha Factors Combine Alpha Factors Execution\nOptimize Portfolio Execute Trades "},{"id":3,"href":"/docs/financial/fundamental_data/","title":"Fundamental Data","section":"Financial","content":" 基础知识 # 不同类型的订单 # 市价订单(market order):市价订单旨在在抵达交易场所时立即执行，以那一刻的市价为准。 限价订单(limit order):限价订单只有在市场价格高于卖出限价订单的限价或低于买入限价订单的限价时才执行。 止损订单(stop order):止损订单则只有在市场价格升至买入止损订单的指定价格或下降至卖出止损订单的指定价格时才激活。 买入止损订单(buy stop order):用于限制空头交易的损失。 数据清洗与整理 # 略。详见jupyter文档\n订单的可视化 # tick bars # tick级别的数据体量较大，刻画数据可以使用最直接的直线图。刻画在不同的时间戳下的成交价格。由于在开盘和收盘时交易活动最活跃，波动也最大，所以经常去掉cross数据。\n书中核心代码如下\nstock, date = \u0026#39;AAPL\u0026#39;, \u0026#39;20191030\u0026#39; title = \u0026#39;{} | {}\u0026#39;.format(stock, pd.to_datetime(date).date() with pd.HDFStore(itch_store) as store: sys_events = store[\u0026#39;S\u0026#39;].set_index(\u0026#39;event_code\u0026#39;) # system events sys_events.timestamp = sys_events.timestamp.add(pd.to_datetime(date)).dt.time market_open = sys_events.loc[\u0026#39;Q\u0026#39;, \u0026#39;timestamp\u0026#39;] market_close = sys_events.loc[\u0026#39;M\u0026#39;, \u0026#39;timestamp\u0026#39;] with pd.HDFStore(stock_store) as store: trades = store[\u0026#39;{}/trades\u0026#39;.format(stock)].reset_index() trades = trades[trades.cross == 0] # excluding data from open/close crossings trades.price = trades.price.mul(1e-4) # format price trades = trades[trades.cross == 0] # exclude crossing trades trades = trades.between_time(market_open, market_close) # market hours only tick_bars = trades.set_index(\u0026#39;timestamp\u0026#39;) tick_bars.index = tick_bars.index.time tick_bars.price.plot(figsize=(10, 5), title=title), lw=1) 值得注意的是，这个作图并不是很精致，尤其是刻度线部分。\ntime bars # 改进1： 因为逐笔数据以纳秒为索引，噪音较大。例如买卖报价(bid-ask bounce)会导致价格在买入和卖出市场的订单交替发起时，在买入价和卖出价之间震荡。为提高噪音信号比，并改善统计属性，通过聚合交易活动来重采样规范化逐笔数据。\n收集聚合周期的olhc以及成交量加权平均价格(VWAP)、交易的股票数量以及数据相关联的时间戳。\n核心代码如下： 聚合周期为1min，加权平均计算为$vwap = \\dfrac{price \\cdot shares}{\\sum{shares}}$\ndef get_bar_stats(agg_trades: pd.core.groupby): vwap = agg_trades.apply(lambda x: np.average(x.price, weights=x.shares)).to_frame(\u0026#39;vwap\u0026#39;) ohlc = agg_trades.price.ohlc() # 创建 open high, low, close vol = agg_trades.shares.sum().to_frame(\u0026#39;vol\u0026#39;) # 汇总份额 txn = agg_trades.shares.size().to_frame(\u0026#39;txn\u0026#39;) # 每个组里有多少个不同的shares return pd.concat([ohlc, vwap, vol, txn], axis=1) resampled = trades.groupby(pd.Grouper(freq=\u0026#39;1Min\u0026#39;)) # 以1min为周期进行聚合。 time_bars = get_bar_stats(resampled) K线图 bokeh库\nfrom bokeh.io import output_notebook, show output_notebook() resampled = trades.groupby(pd.Grouper(freq=\u0026#39;5Min\u0026#39;)) # 5 Min bars for better print df = get_bar_stats(resampled) increase = df.close \u0026gt; df.open # 上升 decrease = df.open \u0026gt; df.close # 下降 w = 2.5 * 60 * 1000 # 2.5 min in ms WIDGETS = \u0026#34;pan, wheel_zoom, box_zoom, reset, save\u0026#34; p = figure(x_axis_type=\u0026#39;datetime\u0026#39;, tools=WIDGETS, title = \u0026#34;AAPL Candlestick\u0026#34;) # plot_width=1500, p.xaxis.major_label_orientation = pi/4 p.grid.grid_line_alpha=0.4 p.segment(df.index, df.high, df.index, df.low, color=\u0026#34;black\u0026#34;) p.vbar(df.index[increase], w, df.open[increase], df.close[increase], fill_color=\u0026#34;#FF0000\u0026#34;, line_color=\u0026#34;black\u0026#34;) p.vbar(df.index[decrease], w, df.open[decrease], df.close[decrease], fill_color=\u0026#34;#008000\u0026#34;, line_color=\u0026#34;black\u0026#34;) show(p) volumn bars # time bars可以平滑原始逐笔数据中的一些噪音，但可能无法解释订单的碎片化。以执行为中心的算法交易可能旨在在给定时期内匹配成交量加权平均价格（VWAP），并将单一订单分成多个交易，并根据历史模式下单。即使市场中没有新信息到来，时间条也会对同一订单进行不同的处理。volumn bars根据交易量来聚合交易数据。\ntrades_per_min = trades.shares.sum()/(60*7.5) # min per trading day 每天交易的分钟数 trades[\u0026#39;cumul_vol\u0026#39;] = trades.shares.cumsum() df = trades.reset_index() by_vol = df.groupby(df.cumul_vol.div(trades_per_min).round().astype(int)) vol_bars = pd.concat([by_vol.timestamp.last().to_frame(\u0026#39;timestamp\u0026#39;), get_bar_stats(by_vol)], axis=1) vol_bars.head() $每分钟的平均交易量 = (\\sum{shares}) / (60*7.5)$\n累积的交易量 = shares.cumsum()\n累积交易量/每分钟的交易量\n这个处理方式比较难理解。只是在交易量上的不同，但是时间戳都混乱了。\ndollar bars # dollar bars也进行了和volumn bars类似的处理。\nvalue_per_min = trades.shares.mul(trades.price).sum()/(60*7.5) # min per trading day trades[\u0026#39;cumul_val\u0026#39;] = trades.shares.mul(trades.price).cumsum() df = trades.reset_index() by_value = df.groupby(df.cumul_val.div(value_per_min).round().astype(int)) dollar_bars = pd.concat([by_value.timestamp.last().to_frame(\u0026#39;timestamp\u0026#39;), get_bar_stats(by_value)], axis=1) dollar_bars.head() algoseek数据 # algoseek提供了分钟数据。网站上的数据需要订阅，书中提供了 示例数据\n"},{"id":4,"href":"/docs/linux/wol/","title":"计算机的网络唤醒功能(WOL)","section":"Linux","content":" 简介 # 网络唤醒，Wake-on-LAN，简写WOL。查阅一些资料，各种电脑的网络唤醒功能各异。我的笔记本没有此功能，有的电脑只支持睡眠状态的网络唤醒，有的则能支持完全关机的网络唤醒。很幸运这个迷你主机支持完全关机下的网络唤醒。下面是一些配置。\n使用 # BIOS\n在bios中找到有wol类似字样的设置并enable。 软件查看 查看现有设置。安装ethtool软件后， ethtool eth0 | grep -i wake g代表enable，d代表disable。\n永久修改 # /etc/conf.d/net ethtool_change_eth0=\u0026#34;wol g\u0026#34; eth0改为相应的网络接口。\n远程启动 查看本地网络接口和mac地址ip addr 另一台电脑运行 wakeonlan \u0026lt;mac_address\u0026gt; "},{"id":5,"href":"/docs/financial/terminology/","title":"金融常见术语","section":"Financial","content":" 概念 # 策略 # "},{"id":6,"href":"/docs/second_doc/","title":"Second Doc","section":"Docs","content":" ch1 # this is the second paper.\n"},{"id":7,"href":"/posts/first_post/","title":"First Post","section":"Posts","content":" ch1 # this is first post.not doc.\n"},{"id":8,"href":"/menu/","title":"Menu","section":"skasis paradigm","content":" Data Analysis Page One Page Two 金融概念 Linux acme证书 网络唤醒WOL Blog "}]